# Advanced Windows Firewall Security Configuration - Whitelist Approach
# Equivalent to init-firewall.ts for Windows Sandbox environments

Write-Host "üî• Initializing advanced firewall configuration..." -ForegroundColor Yellow

try {
    Write-Host "üßπ Clearing existing firewall rules..." -ForegroundColor Green
    # Remove all existing firewall rules (except built-in rules)
    Get-NetFirewallRule | Where-Object { $_.Group -notlike "*@*" -and $_.DisplayName -notlike "Core Networking*" -and $_.DisplayName -notlike "Windows*" } | Remove-NetFirewallRule -ErrorAction SilentlyContinue

    Write-Host "üåê Setting up basic connectivity rules..." -ForegroundColor Green
    # Allow DNS (required for domain resolution)
    New-NetFirewallRule -DisplayName "Allow-DNS-Out" -Direction Outbound -Protocol UDP -RemotePort 53 -Action Allow -ErrorAction Stop
    New-NetFirewallRule -DisplayName "Allow-DNS-In" -Direction Inbound -Protocol UDP -LocalPort 53 -Action Allow -ErrorAction Stop
    
    # Allow localhost communication
    New-NetFirewallRule -DisplayName "Allow-Localhost-Out" -Direction Outbound -RemoteAddress 127.0.0.1 -Action Allow -ErrorAction Stop
    New-NetFirewallRule -DisplayName "Allow-Localhost-In" -Direction Inbound -RemoteAddress 127.0.0.1 -Action Allow -ErrorAction Stop

<% if (it.firewall.enableGitHubApi) { %>
    Write-Host "üêô Fetching GitHub IP ranges..." -ForegroundColor Green
    # Fetch GitHub meta information
    try {
        $ghRangesResp = Invoke-RestMethod -Uri "https://api.github.com/meta" -TimeoutSec <%= it.firewall.timeoutSec %>
        if (-not $ghRangesResp.web -or -not $ghRangesResp.api -or -not $ghRangesResp.git) {
            throw "GitHub API response missing required fields"
        }
        
        Write-Host "üìã Processing GitHub IPs..." -ForegroundColor Green
        $allGithubIPs = @()
        $allGithubIPs += $ghRangesResp.web
        $allGithubIPs += $ghRangesResp.api
        $allGithubIPs += $ghRangesResp.git
        $allGithubIPs = $allGithubIPs | Select-Object -Unique
        
        # Add GitHub IP ranges
        foreach ($cidr in $allGithubIPs) {
            if ($cidr -match '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$') {
                Write-Host "üìç Adding GitHub range $cidr" -ForegroundColor Cyan
                New-NetFirewallRule -DisplayName "Allow-GitHub-$cidr" -Direction Outbound -RemoteAddress $cidr -Action Allow -ErrorAction SilentlyContinue
            } else {
                Write-Warning "‚ö†Ô∏è Invalid CIDR range from GitHub meta: $cidr"
            }
        }
    } catch {
        Write-Warning "‚ö†Ô∏è Failed to fetch GitHub IP ranges: $($_.Exception.Message)"
    }
<% } %>

    Write-Host "üîç Resolving and adding allowed domains..." -ForegroundColor Green
    # Allowed domains list (Windows development environment)
    $allowedDomains = @(        
<% if (it.firewall.allowedDomains.github) { %>
        # GitHub services
<% it.firewall.allowedDomains.github.forEach(domain => { %>
        "<%= domain %>",                        # GitHub service
<% }) %>
<% } %>
        
<% if (it.firewall.allowedDomains.packageManagers) { %>
        # Package managers
<% it.firewall.allowedDomains.packageManagers.forEach(domain => { %>
        "<%= domain %>",                        # Package manager
<% }) %>
<% } %>
        
<% if (it.firewall.allowedDomains.developmentTools) { %>
        # Development tools
<% it.firewall.allowedDomains.developmentTools.forEach(domain => { %>
        "<%= domain %>",                        # Development tool
<% }) %>
<% } %>
        
<% if (it.firewall.allowedDomains.vscode) { %>
        # VSCode ecosystem
<% it.firewall.allowedDomains.vscode.forEach(domain => { %>
        "<%= domain %>",                        # VSCode service
<% }) %>
<% } %>
        
<% if (it.firewall.allowedDomains.claude) { %>
        # Claude/Anthropic services
<% it.firewall.allowedDomains.claude.forEach(domain => { %>
        "<%= domain %>",                        # Claude service
<% }) %>
<% } %>

<% if (it.firewall.allowedDomains.additional && it.firewall.allowedDomains.additional.length > 0) { %>
        # Additional domains
<% it.firewall.allowedDomains.additional.forEach(domain => { %>
        "<%= domain %>",                        # Additional domain
<% }) %>
<% } %>
        
        # Remove trailing comma from last entry
        "" | Out-Null
    )
    
    # Remove empty entries from array
    $allowedDomains = $allowedDomains | Where-Object { $_ -ne "" }

    foreach ($domain in $allowedDomains) {
        Write-Host "üîç Resolving $domain..." -ForegroundColor Cyan
        try {
            $ips = Resolve-DnsName -Name $domain -Type A -ErrorAction Stop | Where-Object { $_.IPAddress }
            if ($ips) {
                foreach ($ip in $ips) {
                    if ($ip.IPAddress -match '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$') {
                        Write-Host "üìç Adding $($ip.IPAddress) for $domain" -ForegroundColor Green
                        New-NetFirewallRule -DisplayName "Allow-$domain-$($ip.IPAddress)" -Direction Outbound -RemoteAddress $ip.IPAddress -Action Allow -ErrorAction SilentlyContinue
                    }
                }
            } else {
                Write-Warning "‚ö†Ô∏è Failed to resolve $domain"
            }
        } catch {
            Write-Warning "‚ö†Ô∏è Failed to resolve $domain : $($_.Exception.Message)"
        }
    }

    Write-Host "üîí Setting default deny policies..." -ForegroundColor Green
    # Set default policies to deny
    netsh advfirewall set allprofiles firewallpolicy blockinbound,blockoutbound

    Write-Host "‚úÖ Advanced firewall configuration completed successfully!" -ForegroundColor Green

} catch {
    Write-Host "‚ùå Firewall configuration failed: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}